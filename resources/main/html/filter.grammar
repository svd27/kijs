start = logical

logical = 
   p1:primary sep r:logop sep p2:logical+ {
    var js = JSON.parse("{}")
    var oa = JSON.parse("[]")
    js.relation = r
    oa.push(p1)
    console.log(p2)
    for(o in p2) {
      oa.push(p2[o])
    }
    js.operands = oa
    return js
  }
  / p1:negation {
  return p1
  }
  / sep p1:primary sep {return p1}
  / '(' logical ')'

logop = 'AND' {return "AND"} / 'OR' {return "OR"} / 'and' {return "AND"} / 'or' {return "OR"} / '&&' {return "AND"} / '||' {return "OR"}

negation = r:'NOT' sep p:logical {
var js = JSON.parse('{}')
   js.relation = 'NOT'
   js.operand = p
   return js
}

primary = f:filter  {return f}
  / '(' sep g:logical sep ')' {
   var js = JSON.parse('{}')
   js.group = g
   return g
  }

filter = 
 n:name sep rel:to sep l:logical  {
var name = n.join("")
var value = l
var js = JSON.parse('{}')
js.property = name
js.filter = value
js.relation = rel
return js
}
/ n:qname sep rel:from sep l:logical {
var name = n
var js = JSON.parse('{}')
js.relation = "FROM"
js.qname = n
js.filter = l
return js
}
/ n:name sep op:match sep v:value { 
var name = n.join("")
var value = v
var js = JSON.parse('{}')
js.property = name
js.value = value
js.relation = op
return js

}
 
to = 
  '->' {return "TO"}
from = 
  '<-' {return "FROM"}

match =
   '>=' {return "GTE"}
  / '<=' {return "LTE"}
  / '~=' {return "LIKE"}
  / '=' {return "EQ"}
  / '>' {return "GT"}
  / '<' {return "LT"}


name = [a-zA-Z]+

qname = e:name '.' n:name {
var js = JSON.parse("{}")
js.entity = e.join("")
js.property = n.join("")
return js
}

digits = d:[0-9]+ {return d.join("")}
int = ai:([\+\-]?digits+) {return ai[1].join("")}

float = f:(int '.' digits) {return  f.join("")}

value =
  v:float {console.log("double:", v);  return parseFloat(v)}
  / v : int { return parseInt(v)}
  / '"' v:[^"]* '"' {return v.join("")}

sep = [ \t\n]*